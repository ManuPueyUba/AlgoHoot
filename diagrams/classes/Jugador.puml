@startuml
class Jugador {
    -nombre: string
    -puntos: int
    -ArrayList<Respuesta> respuestasDelJugador
    
    +{static}Jugador(String nombreJugador)
    +responder(pregunta:Pregunta, respuestaElegida:Respuesta)
    +modificarPuntaje(puntajePregunta:int)
    +obtenerPuntos(): int
    +obtenerNombre(): string
    +activarDuplicadorDePuntaje() throws ModificadorSeUsaMasDeUnaVezException
    +activarTriplicadorDePuntaje() throws ModificadorSeUsaMasDeUnaVezException
    +obtenerRespuestas(): ArrayList<Respuesta>
    +confirmarRespuesta(pregunta: Pregunta)
    +activarAnuladorDePuntaje(pregunta: Pregunta) throws AnuladorSeUsaMasDeUnaVez
    +activarExclusividad(pregunta: Pregunta) throws ExclusividadSeUsaMasdeDosVeces
}
MultiplicadorPorDos <- Jugador
MultiplicadorPorTres <- Jugador
Jugador -> GestorAnulador
Jugador -> GestorExclusividad
class GestorAnulador {
    -usosDisponiblesAnulador: int
    +gestarActivacion(pregunta:Pregunta, jugador:Jugador) throws AnuladorSeUsaMasDeUnaVez
}
class GestorExclusividad {
    -usosDisponiblesExclusividad: int
    +gestarActivacion(pregunta:Pregunta, jugador:Jugador) throws AnuladorSeUsaMasDeUnaVez
}
class MultiplicadorPorDos {
    -multiplicador: int
    +activar()
    +modificarPuntaje(puntaje: int): int
}
class MultiplicadorPorTres{
    -multiplicador: int
    +activar()
    +modificarPuntaje(puntaje: int): int
}
@enduml
